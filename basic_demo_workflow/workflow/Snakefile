# Define samples from data directory using wildcards
SAMPLES, = glob_wildcards("../../data/{sample}_1.fastq.gz")

# Target OUTPUT files for the whole workflow
rule all:
    input:
        "../results/multiqc_report.html",
        expand("../results/mapped/{sample}.bam", sample = SAMPLES)

# Workflow
rule fastqc:
    input:
        R1 = "../../data/{sample}_1.fastq.gz",
        R2 = "../../data/{sample}_2.fastq.gz"
    output:
        html = ["../results/fastqc/{sample}_1_fastqc.html", "../results/fastqc/{sample}_2_fastqc.html"],
        zip = ["../results/fastqc/{sample}_1_fastqc.zip", "../results/fastqc/{sample}_2_fastqc.zip"]
    log:
        "logs/fastqc/{sample}.log"
    threads: 8
    conda:
        "envs/fastqc.yaml"
    shell:
        "fastqc {input.R1} {input.R2} -o ../results/fastqc/ -t {threads} &> {log}"

rule multiqc:
    input:
        expand(["../results/fastqc/{sample}_1_fastqc.zip", "../results/fastqc/{sample}_2_fastqc.zip"], sample = SAMPLES)
    output:
        "../results/multiqc_report.html"
    log:
        "logs/multiqc/multiqc.log"
    conda:
        "envs/multiqc.yaml"
    shell:
        "multiqc {input} -o ../results/ &> {log}"

 rule trim_galore:
     input:
         ["../../data/{sample}_1.fastq.gz", "../../data/{sample}_2.fastq.gz"]
     output:
         ["../results/trimmed/{sample}_1_val_1.fq.gz", "../results/trimmed/{sample}_2_val_2.fq.gz"]
     log:
         "logs/trim_galore/{sample}.log"
     conda:
         "./envs/trim_galore.yaml"
     threads: 8
     shell:
         "trim_galore {input} -o ../results/trimmed/ --paired --cores {threads} &> {log}"

 rule bwa:
     input:
         fastq = ["../results/trimmed/{sample}_1_val_1.fq.gz", "../results/trimmed/{sample}_2_val_2.fq.gz"],
         refgenome = "/store/lkemp/publicData/b37/human_g1k_v37_decoy.fasta"
     output: 
         "../results/mapped/{sample}.bam"
     log:
         "logs/bwa_mem/{sample}.log"
     conda:
         "./envs/bwa.yaml"
     threads: 8
     shell:
         "bwa mem -t {threads} {input.refgenome} {input.fastq} > {output} 2> {log}"